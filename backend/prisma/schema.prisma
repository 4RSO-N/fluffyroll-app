generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  displayName   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  fitnessProfile FitnessProfile?
  meals          Meal[]
  waterLogs      WaterLog[]
  workouts       Workout[]
  habits         Habit[]
  cycleProfile   CycleProfile?
  periods        Period[]
  journalSecurity JournalSecurity?
  journalEntries  JournalEntry[]
}

model FitnessProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentWeightKg    Float
  targetWeightKg     Float?
  heightCm           Float
  dailyCalorieGoal   Int      @default(2000)
  dailyProteinG      Int      @default(150)
  dailyCarbsG        Int      @default(200)
  dailyFatG          Int      @default(65)
  dailyWaterGlasses  Int      @default(8)
  activityLevel      String   @default("moderate")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Meal {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealType    String
  mealName    String
  consumedAt  DateTime   @default(now())
  items       MealItem[]
  createdAt   DateTime   @default(now())
}

model MealItem {
  id               String  @id @default(uuid())
  mealId           String
  meal             Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  foodName         String
  servingSize      String
  servingQuantity  Float
  calories         Int
  protein_g        Float   @default(0)
  carbs_g          Float   @default(0)
  fat_g            Float   @default(0)
}

model WaterLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  glasses   Int
  loggedAt  DateTime @default(now())
}

model Workout {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutType     String
  durationMinutes Int
  caloriesBurned  Int
  notes           String?
  performedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
}

model Habit {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  category    String
  icon        String
  color       String
  frequency   String            @default("daily")
  goal        Int               @default(1)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completions HabitCompletion[]
}

model HabitCompletion {
  id        String   @id @default(uuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([habitId, date])
}

model CycleProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  averageCycleLength Int     @default(28)
  averagePeriodLength Int    @default(5)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Period {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime?
  flow      String?
  symptoms  String?
  notes     String?
  createdAt DateTime @default(now())
}

model JournalSecurity {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pin        String
  authMethod String   @default("pin")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JournalEntry {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  promptUsed  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
